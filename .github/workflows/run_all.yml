name: Run Benchmarks

# Workflow for running various benchmarks in sequence
on:
  workflow_dispatch:
    inputs:
      root_dir:
        description: "Enter the root directory for benchmarks"
        required: true
        default: "/root/benchmarks/"
      date:
        description: "Enter a date (optional, e.g. 20240101)"
        required: false
        default: ""
      clients:
        description: "Enter clients to use (e.g., [nethermind,geth,reth,erigon,besu])"
        required: true
        default: '["nethermind","geth","reth","erigon","besu"]'
      sizes:
        description: "Enter sizes (e.g., [1000])"
        required: false
        default: '[1000]'
      repetitions:
        description: "Enter the number of repetitions"
        required: true
        default: 8
  schedule:
    - cron: "0 0 * * 6"  # Run every Saturday at midnight

# Define environment variables used across jobs
env:
  SSH_OPTIONS: "-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=60"

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    env:
      ROOT_DIR: ${{ github.event.inputs.root_dir || '/root/benchmarks/' }}
      DATE: ${{ github.event.inputs.date || '' }}
      CLIENTS: ${{ github.event.inputs.clients || '["nethermind","geth","reth","erigon","besu"]' }}
      SIZES: ${{ github.event.inputs.sizes || '[1000]' }}
      REPETITIONS: ${{ github.event.inputs.repetitions || 8 }}
    outputs:
      date: ${{ steps.set-date.outputs.date }}
      root_dir: ${{ steps.set-date.outputs.root_dir }}
      clients: ${{ steps.set-date.outputs.clients }}
      sizes: ${{ steps.set-date.outputs.sizes }}
      repetitions: ${{ steps.set-date.outputs.repetitions }}
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRIVKEY }}
      
      - name: Set DATE variable
        id: set-date
        run: |
          if [ -z "${{ env.DATE }}" ]; then
            DATE=$(date +%Y%m%d)
          else
            DATE=${{ env.DATE }}
          fi
          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "root_dir=${{ env.ROOT_DIR }}" >> $GITHUB_OUTPUT
          echo "clients=${{ env.CLIENTS }}" >> $GITHUB_OUTPUT
          echo "sizes=${{ env.SIZES }}" >> $GITHUB_OUTPUT
          echo "repetitions=${{ env.REPETITIONS }}" >> $GITHUB_OUTPUT
      
      - name: Clone and prepare repositories
        run: |
          declare -A REPOS=(
            ["benchmarks-data-results"]="main"
            ["gas-benchmarks"]="rc-1"
            ["burntpix-benchmarks"]="burnt-rc-1"
            ["genesis-init-benchmarks"]="main"
          )
          
          ssh ${{ env.SSH_OPTIONS }} root@${{ secrets.REMOTE_IP }} << EOF
            set +e
            mkdir -p "${{ env.ROOT_DIR }}"
            cd "${{ env.ROOT_DIR }}"
            
            for repo in "\${!REPOS[@]}"; do
              [ -d "\$repo" ] && rm -rf "\$repo"
              branch="\${REPOS[\$repo]}"
              if [ "\$repo" = "benchmarks-data-results" ]; then
              # Use personal access token to clone benchmarks-data-results for private repository
                git clone -b "\$branch" https://${{ secrets.GIT_TOKEN_PREFIX }}@github.com/OpenFusionist/\$repo.git \$repo
              else
                git clone -b "\$branch" https://github.com/OpenFusionist/\$repo.git \$repo
              fi
              cd "\$repo"
              git switch "\$branch"
              cd ..
            done
            set -e
          EOF
      
      - name: Stop existing benchmarks and prepare environment
        run: |
          ssh ${{ env.SSH_OPTIONS }} root@${{ secrets.REMOTE_IP }} << EOF
            set +e
            cd "${{ env.ROOT_DIR }}/benchmarks-data-results"
            git reset --hard
            git clean -fd 
            git pull
            ./stop.sh
            python3 ./update_time.py "${{ env.DATE }}"
            cat ./date.json
            set -e
          EOF

  generate-matrix:
    runs-on: ubuntu-latest
    needs: setup-environment
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      date: ${{ needs.setup-environment.outputs.date }}
      root_dir: ${{ needs.setup-environment.outputs.root_dir }}
      clients: ${{ needs.setup-environment.outputs.clients }}
      sizes: ${{ needs.setup-environment.outputs.sizes }}
      repetitions: ${{ needs.setup-environment.outputs.repetitions }}
    steps:
      - name: Check Date
        id: check-date
        run: |
          if [ -z "${{ needs.setup-environment.outputs.date }}" ]; then
            echo "::error::Date is empty, exiting the job."
            exit 1
          fi

      - name: Generate Matrix
        id: generate-matrix
        run: |
          CLIENTS='${{ needs.setup-environment.outputs.clients }}'
          SIZES='${{ needs.setup-environment.outputs.sizes }}'
          
          # Create matrix configuration for parallel execution
          CLIENTS_JSON=$(echo "$CLIENTS" | sed 's/[][]//g' | jq -R 'split(",")')
          SIZES_JSON=$(echo "$SIZES" | sed 's/[][]//g' | jq -R 'split(",") | map(tonumber)')
          MATRIX=$(echo '{}' | jq -c --argjson clients "$CLIENTS_JSON" --argjson sizes "$SIZES_JSON" \
            '{Client: $clients, Size: $sizes}')
          
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  # Run benchmarks in parallel for each client
  run-benchmarks:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      max-parallel: 1  # Adjust based on server capacity
      fail-fast: false
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRIVKEY }}
          
      - name: Run all benchmarks for client
        env:
          CLIENT: ${{ matrix.Client }}
          SIZE: ${{ matrix.Size }}
          DATE: ${{ needs.generate-matrix.outputs.date }}
          ROOT_DIR: ${{ needs.generate-matrix.outputs.root_dir }}
          REPETITIONS: ${{ needs.generate-matrix.outputs.repetitions }}
        run: |
          ssh ${{ env.SSH_OPTIONS }} root@${{ secrets.REMOTE_IP }} << EOF
            set +e
            cd "$ROOT_DIR"
            
            # Run gas benchmarks
            echo "=== Running gas benchmarks for $CLIENT ==="
            cd gas-benchmarks
            cp ../benchmarks-data-results/images.yaml .
            ./run.sh -t "tests/" -w "warmup/warmup-1000bl-16wi-24tx.txt" -c "$CLIENT" -r "$REPETITIONS" -o "results-$DATE"
            python3 report_metadata.py "$DATE"
            cp "results-$DATE/reports/"* "../benchmarks-data-results/gas/$DATE"*
            
            # Run genesis init speed benchmarks
            echo "=== Running genesis init speed benchmarks for $CLIENT ==="
            cd ../genesis-init-benchmarks
            cp ../benchmarks-data-results/images.yaml .
            ./runSpeed.sh -t "tests/" -c "$CLIENT" -r "$REPETITIONS" -o "results-$DATE/speed" -s "$SIZE"
            python3 report_metadata.py "$DATE" speed
            cp "results-$DATE/speed/reports/"* "../benchmarks-data-results/genesis-data/$DATE"*
            
            # Run genesis init memory benchmarks
            echo "=== Running genesis init memory benchmarks for $CLIENT ==="
            ./runMemory.sh -t "tests/" -c "$CLIENT" -r "$REPETITIONS" -o "results-$DATE/memory" -s "$SIZE"
            python3 report_metadata.py "$DATE" memory
            cp "results-$DATE/memory/reports/"* "../benchmarks-data-results/genesis-data/$DATE"*
            python3 merge_result.py "$DATE"
            cp "results-$DATE/result.json" "../benchmarks-data-results/genesis-data/$DATE.json"
            
            # Run burntpix benchmarks
            echo "=== Running burntpix benchmarks for $CLIENT ==="
            cd ../burntpix-benchmarks
            cp ../benchmarks-data-results/images.yaml .
            ./run.sh -t "testburnt/" -w "./testburntwarm/warm.txt" -c "$CLIENT" -r "$REPETITIONS" -o "results-$DATE"
            python3 report_metadata.py "$DATE"
            cp "results-$DATE/reports/"* "../benchmarks-data-results/burntpix/$DATE"*
            set -e
          EOF

  push-results:
    runs-on: ubuntu-latest
    needs: run-benchmarks
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRIVKEY }}
          
      - name: Push results
        env:
          ROOT_DIR: ${{ needs.generate-matrix.outputs.root_dir }}
        run: |
          ssh ${{ env.SSH_OPTIONS }} root@${{ secrets.REMOTE_IP }} << EOF
            set +e
            cd "$ROOT_DIR/benchmarks-data-results"
            git add .
            git commit -m "Add benchmark results"
            git push
            set -e
          EOF
